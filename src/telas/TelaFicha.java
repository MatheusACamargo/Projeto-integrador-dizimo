/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package telas;

import database.Conexao;
import database.DBEndereco;
import database.DBFicha;
import database.DBFichaPessoa;
import database.DBMException;
import database.DBMLocalizador;
import database.DBMPersistor;
import database.DBPagamento;
import database.DBPessoa;
import dizimo.Funcao;
import java.awt.Component;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractCellEditor;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellEditor;
import javax.swing.text.JTextComponent;
import sun.awt.CausedFocusEvent;

/**
 *
 * @author Lucas
 */
public class TelaFicha extends javax.swing.JDialog {
    private Funcao fun;
    private boolean OK;
    private int codigo;

    private DBFicha ficha;
    private DBMLocalizador<DBFicha> lFicha;
    private DBMPersistor pFicha;
    private DBMPersistor pFichaPessoa;
    private Calendar cal;
    
    private DBPagamento pagamento;
    private DBMPersistor pPagamento;
    private DBMLocalizador<DBPagamento> lPagamento;
    private ArrayList<DBPagamento> aPagamentoGravados;

    private DBPessoa responsavel;
    private DBMLocalizador<DBPessoa> lPessoa;
    private DBPessoa pessoa;

    private DBEndereco endereco;
    private DBMLocalizador<DBEndereco> lEndereco;

    private ArrayList<DBFichaPessoa> aFichaPessoa;
    private DBMLocalizador<DBFichaPessoa> lFichaPessoa;
    private ArrayList<DBFichaPessoa> auxiliarFichaPessoa;

    /**
     * Creates new form TelaFichaNova
     */
    public TelaFicha(java.awt.Dialog parent, boolean modal, Funcao fun, int codigo) {
        super(parent, modal);
        this.fun = fun;
        this.codigo = codigo;
        OK = false;
        initComponents();
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lbHistorico = new javax.swing.JLabel();
        pbPessoas = new javax.swing.JButton();
        pbOk = new javax.swing.JButton();
        lbNumero = new javax.swing.JLabel();
        tfNumero = new javax.swing.JTextField();
        tfResponsavel = new javax.swing.JTextField();
        lbResponsavel = new javax.swing.JLabel();
        lbEndereco = new javax.swing.JLabel();
        tfEndereco = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbPagamentos = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tfObservacoes = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Manutenção da ficha");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        lbHistorico.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lbHistorico.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbHistorico.setText("Histórico das contribuições");

        pbPessoas.setText("Pessoas");
        pbPessoas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pbPessoasActionPerformed(evt);
            }
        });

        pbOk.setText("OK");
        pbOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pbOkActionPerformed(evt);
            }
        });

        lbNumero.setText("Número");

        tfNumero.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                tfNumeroFocusLost(evt);
            }
        });

        tfResponsavel.setEditable(false);

        lbResponsavel.setText("Responsável");

        lbEndereco.setText("Endereço");

        tfEndereco.setEditable(false);

        tbPagamentos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Ano", "Jan.", "Fev.", "Mar.", "Abr.", "Mai.", "Jun.", "Jul.", "Ago.", "Set.", "Out", "Nov.", "Dez.", "Total R$"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Float.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true, true, true, true, true, true, true, true, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tbPagamentos);

        tfObservacoes.setColumns(20);
        tfObservacoes.setRows(5);
        jScrollPane2.setViewportView(tfObservacoes);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lbEndereco)
                    .addComponent(lbNumero)
                    .addComponent(lbResponsavel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(tfEndereco, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tfResponsavel)
                            .addComponent(tfNumero))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pbPessoas)))
                .addContainerGap(293, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addComponent(lbHistorico, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(pbOk)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbNumero)
                    .addComponent(tfNumero, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfResponsavel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbResponsavel)
                    .addComponent(pbPessoas))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbEndereco)
                    .addComponent(tfEndereco, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbHistorico)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(pbOk)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void pbPessoasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pbPessoasActionPerformed
        TelaPessoasFicha tPessoas = new TelaPessoasFicha(this, true, ficha, aFichaPessoa, fun);
        tPessoas.setVisible(true);
        if(tPessoas.isOK()){
            responsavel = tPessoas.getResponsavel();
            if(responsavel!=null){
                exibeResponsavel(responsavel);
            }
        }
    }//GEN-LAST:event_pbPessoasActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        try {
            lFicha = new DBMLocalizador<>(DBFicha.class);
            lFichaPessoa = new DBMLocalizador<>(DBFichaPessoa.class);
            lPagamento = new DBMLocalizador<>(DBPagamento.class);
            //Se é inclusão apenas cria um novo objeto
            if(fun == Funcao.INCLUSAO){
                ficha = new DBFicha();
                aFichaPessoa = new ArrayList<>();
                aPagamentoGravados = new ArrayList<>();
            }else{
                //para demais funções busca o registro no banco
                ficha = lFicha.procuraRegistro(codigo);
                if(ficha == null){
                    JOptionPane.showMessageDialog(this, "Ficha de código " + codigo + " não foi lida corretamente do banco!");
                    dispose();
                }
                aFichaPessoa = lFichaPessoa.procuraRegistros("intFicha = " + Integer.toString(codigo));
                if(aFichaPessoa == null){
                    aFichaPessoa = new ArrayList<>();
                }
                responsavel = ficha.getResponsavel();
                aPagamentoGravados = lPagamento.procuraRegistros("codigoFicha = " + Integer.toString(codigo));
                if(aPagamentoGravados == null){
                    aPagamentoGravados = new ArrayList<>();
                }

            }
            pFicha = new DBMPersistor(ficha);
        } catch (DBMException e) {
        }
        //se é função que não aceita os dados
        if(fun == Funcao.CONSULTA || fun == Funcao.EXCLUSAO || fun == Funcao.INCLUSAO){
            //Desabilita campos deixando apenas a chave informada
            tfResponsavel.setEnabled(false);
            tfEndereco.setEnabled(false);
            tbPagamentos.setEnabled(false);
            if(fun != Funcao.CONSULTA){
                pbPessoas.setEnabled(false);
            }
            tfObservacoes.setEnabled(false);
        }
        if(fun == Funcao.ALTERACAO || fun == Funcao.CONSULTA ){
            tfNumero.setEnabled(false);
        }
        if(fun == Funcao.CONSULTA || fun == Funcao.EXCLUSAO || fun == Funcao.ALTERACAO){
            //Carrega dados da ficha lida para a manutenção
            tfNumero.setText(ficha.getCodigo().toString());
            tfResponsavel.setText(ficha.getResponsavel().getNome());
            tfEndereco.setText(ficha.getResponsavel().getEndereco().getLogradouro());
            tfObservacoes.setText(ficha.getObservacoes());
        }
        
        //Busca ano atual
        cal = Calendar.getInstance();
        int anoAtual = cal.get(Calendar.YEAR);
        
        //Carrega conteúdo padrão para a lista de pagamentos
        DefaultTableModel dtmPagamentos = (DefaultTableModel) tbPagamentos.getModel();
        Object[] rowDefault = {anoAtual, "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-",0};
        Object[] rowInserida;
        for (int i = 0; i < 30; i++) {
            rowInserida = rowDefault.clone();
            rowInserida[0] = anoAtual - i;
            
            for (DBPagamento pagamentoGravado : aPagamentoGravados) {
                
                Date dat = pagamentoGravado.getDataReferencia();
                
                cal.setTime(dat);
                int ano = cal.get(Calendar.YEAR);
                int mes = cal.get(Calendar.MONTH);
                if(ano == (int) rowInserida[0]){
                    for (int j = 0; j < 12; j++) {
                        if(mes == j){
                            rowInserida[j+1] = pagamentoGravado.getValor();
                        }
                    }
                }    
            }
            dtmPagamentos.addRow(rowInserida);
        }
    }//GEN-LAST:event_formWindowOpened

    private void tfNumeroFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tfNumeroFocusLost
        if(evt.isTemporary())return;
        if(((CausedFocusEvent) evt).getCause() == CausedFocusEvent.Cause.CLEAR_GLOBAL_FOCUS_OWNER)return;
        try{
            
            if(fun == Funcao.INCLUSAO){
                int cod;
                //Se código em branco ou zerado
                if(tfNumero.getText().isEmpty() || (cod = Integer.parseInt(tfNumero.getText())) == 0){
                    JOptionPane.showMessageDialog(this, "Código deve ser informado!");
                    tfNumero.requestFocus();
                    return;
                }

                //Se código em branco ou zerado
                if(cod == 0){
                }
                //Verificar se ficha informada já existe para inclusão;
                if(lFicha.procuraRegistro(cod) != null){
                    JOptionPane.showMessageDialog(this, "Ficha de código " + cod + " já existe!");
                    tfNumero.setText("");
                    tfNumero.requestFocus();
                    return;
                }               
            }
            //Define o número da ficha
            ficha.setCodigo(Integer.parseInt(tfNumero.getText()));
            
        }catch(NumberFormatException | DBMException e){
        }
        //Habilita campos de dados
        tbPagamentos.setEnabled(true);
        pbPessoas.setEnabled(true);
        tfObservacoes.setEnabled(true);
        //Desabilita campos da chave do registro
        tfNumero.setEnabled(false);        
    }//GEN-LAST:event_tfNumeroFocusLost

    private void pbOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pbOkActionPerformed
        if(responsavel == null){
            JOptionPane.showMessageDialog(this, "Responsável deve ser informado!");
            pbPessoas.requestFocus();
            return;
        }
        dispose();
        if(tfNumero.getText().isEmpty()){
            return;
        }
        OK = true;
        //Carrega dados da manuteção para a ficha
        ficha.setCodigo(Integer.parseInt(tfNumero.getText()));
        ficha.setResponsavel(responsavel);
        ficha.setObservacoes(tfObservacoes.getText());
        
        
        atualizaNumeroFichaPessoa();
        
        
        //Executa comandos no banco de dados
        try {
            switch(fun){
                case INCLUSAO:
                    pFicha.insere();
                    geraIDFichaPessoa();
                    insereFichaPessoa();
                    inserePagamento();
                    break;
                case ALTERACAO:
                    pFicha.altera();
                    geraIDFichaPessoa();
                    excluiFichaPessoa();
                    insereFichaPessoa();
                    excluiPagamento();
                    inserePagamento();
                    break;
                case EXCLUSAO:
                    pFicha.exclui();
                    excluiFichaPessoa();
                    excluiPagamento();
                    break;
            }
        } catch (DBMException e) {
        }
    }//GEN-LAST:event_pbOkActionPerformed

    
    private void atualizaNumeroFichaPessoa(){
        for (DBFichaPessoa fichaPessoa : aFichaPessoa) {
            try {
                lPessoa = new DBMLocalizador<>(DBPessoa.class);
                pessoa = lPessoa.procuraRegistro(fichaPessoa.getPessoa().getCodigo());
                DBMPersistor pPessoa = new DBMPersistor(pessoa);
                //Se a pessoa está dentro do período da vinculação
                //    Gravar ficha na pessoa
                //Se a pessoa não está dentro do período
                //    Se a ficha já estava na pessoa: Tirar número da ficha
                //    Se não estava: deixar como está
            } catch (DBMException ex) {
                Logger.getLogger(TelaFicha.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    
    private void insereFichaPessoa(){
        for (DBFichaPessoa fichaPessoa : aFichaPessoa) {
            try {
                pFichaPessoa = new DBMPersistor(fichaPessoa);
                pFichaPessoa.insere();
            } catch (DBMException ex) {
                Logger.getLogger(TelaFicha.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private void excluiFichaPessoa(){
        try {
            auxiliarFichaPessoa = lFichaPessoa.procuraRegistros("intFicha = " + Integer.toString(ficha.getCodigo()));
        } catch (DBMException ex) {
            Logger.getLogger(TelaFicha.class.getName()).log(Level.SEVERE, null, ex);
        }
        if(auxiliarFichaPessoa==null){
            return;
        }
        for (DBFichaPessoa fichaPessoa : auxiliarFichaPessoa) {
            try {
                pFichaPessoa = new DBMPersistor(fichaPessoa);
                pFichaPessoa.exclui();
            } catch (DBMException ex) {
                Logger.getLogger(TelaFicha.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private void geraIDFichaPessoa(){
        int codigoFichaPessoa = 0;
        try {
            auxiliarFichaPessoa = lFichaPessoa.procuraRegistros("");
            if(auxiliarFichaPessoa != null){
                codigoFichaPessoa = auxiliarFichaPessoa.get(auxiliarFichaPessoa.size()-1).getCodigo();
            }
        } catch (DBMException ex) {
            Logger.getLogger(TelaFicha.class.getName()).log(Level.SEVERE, null, ex);
        }
        for (DBFichaPessoa fichaPessoa : aFichaPessoa) {
            if(fichaPessoa.getCodigo() == 0){
                codigoFichaPessoa++;
                fichaPessoa.setCodigo(codigoFichaPessoa);
            }
        }
    }

    private void inserePagamento(){
        int ano;
        double valor;
        for(int row=0; row<tbPagamentos.getRowCount();row++){
            ano = (int) tbPagamentos.getModel().getValueAt(row, 0);
            for (int i = 1; i < 12; i++) {
                try{
                    valor = Double.parseDouble(tbPagamentos.getModel().getValueAt(row, i).toString());
                    //Se possui valor para gravar neste mês
                    if(valor!=0){

                        System.out.println("gravar: " + ano + " " + valor);
                        
                        try {
                            pagamento = new DBPagamento();
                            pagamento.setCodigoFicha(ficha.getCodigo());
                            pagamento.setValor(valor);
                            
                            Calendar calendar = Calendar.getInstance();
                            calendar.clear();
                            calendar.set(Calendar.MONTH, i-1);
                            calendar.set(Calendar.YEAR, ano);
                            pagamento.setDataReferencia(calendar.getTime());
                            
                            //pagamento.setDataPagamento();
                            pPagamento= new DBMPersistor(pagamento);
                            pPagamento.insere();
                        } catch (DBMException ex) {
                            Logger.getLogger(TelaFicha.class.getName()).log(Level.SEVERE, null, ex);
                        }

                    }
                }catch(NumberFormatException e){
                }
            }
        }
    }

    private void excluiPagamento(){
        DBMPersistor pPagamentoExcluir;
        for (DBPagamento aPagamentoGravado : aPagamentoGravados) {
            try {
                
                pPagamentoExcluir = new DBMPersistor(aPagamentoGravado);
                pPagamentoExcluir.exclui();
            } catch (DBMException ex) {
                
            }            
        }
    }
    
    private void exibeResponsavel(DBPessoa responsavel){
        tfResponsavel.setText(responsavel.getNome());
        try {
            lEndereco = new DBMLocalizador<>(DBEndereco.class);
            endereco = lEndereco.procuraRegistro(responsavel.getIntEndereco());
        } catch (DBMException ex) {
            Logger.getLogger(TelaFicha.class.getName()).log(Level.SEVERE, null, ex);
        }
        if(endereco!=null){
            tfEndereco.setText(endereco.getLogradouro());
        }
    }

    public boolean isOK() {
        return OK;
    }

    public DBFicha getFicha() {
        return ficha;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lbEndereco;
    private javax.swing.JLabel lbHistorico;
    private javax.swing.JLabel lbNumero;
    private javax.swing.JLabel lbResponsavel;
    private javax.swing.JButton pbOk;
    private javax.swing.JButton pbPessoas;
    private javax.swing.JTable tbPagamentos;
    private javax.swing.JTextField tfEndereco;
    private javax.swing.JTextField tfNumero;
    private javax.swing.JTextArea tfObservacoes;
    private javax.swing.JTextField tfResponsavel;
    // End of variables declaration//GEN-END:variables
}
